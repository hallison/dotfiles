" File types
" ============================================================================

" enable file type detection
filetype on

autocmd BufNewFile,BufRead *.{t2t,txt2tags}         set filetype=txt2tags
autocmd BufNewFile,BufRead *.{md,mkd,mark,markdown} set filetype=markdown
autocmd BufNewFile,BufRead *.{tx,txl,text,textile}  set filetype=textile
autocmd BufNewFile,BufRead *.ru                     set filetype=ruby
autocmd BufNewFile,BufRead *.{rd,rdoc}              set filetype=rdoc

" format documents
autocmd FileType txt,txt2tags,markdown,textile set
  \ textwidth=78
  \ shiftwidth=2
  \ expandtab
  \ wrap
  \ wrapscan
  \ wrapmargin=78
  \ formatoptions+=t

" Paths
" ============================================================================

" includes gems path
autocmd FileType ruby set path+=/usr/lib/ruby/gems/*/gems/**

" includes current path
set path+=./**

" adjust tags path
set tags=$HOME/.vim/tags,.

" store backups under $HOME/.vim/backup
set backupdir=$HOME/.vim/backup
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*

" keep swp files under $HOME/.vim/swap
set directory=$HOME/.vim/swap/,.,$HOME/tmp,/tmp

" Compilers
" ============================================================================

autocmd BufNewFile,BufRead {test_*,*_test}.rb compiler rubyunit
autocmd FileType txt2tags compiler txt2tags
autocmd FileType ruby     compiler ruby

" use only Bash for shell script
let is_bash=1

" Backups
" ============================================================================

" disable creation of backup files
set nobackup

" do keep a backup while working
set writebackup

" keep attributes of original file
set backupcopy=yes

" Indentation
" ============================================================================

" preserve current indent on new lines
set autoindent

" uses auto-indent when start new line
set smartindent

" indentation levels every two columns
set tabstop=2
set softtabstop=2

" convert all tabs to space
set expandtab

" indent/outdent by two columns
set shiftwidth=2

" indent/outdent to nearest tabstops
set shiftround

" make backspaces delete sensibly
set backspace=indent,eol,start

" no line wraps
set nowrap nowrapscan

" load indentation files
filetype plugin indent on

" sane indentation
vnoremap > >gv
vnoremap < <gv

" Spelling
" ============================================================================

" spell checking
set spell spelllang=en,pt

" UI
" ============================================================================

" adjust color scheme
colorscheme darkdevel

" show line numbers
set number

" enable syntax for buffer
syntax on

set autowrite
set encoding=utf8

" text and file should be encoded UTF-8.
set fileencoding=utf8
setglobal encoding=utf-8
setglobal fileencoding=utf-8

" display incomplete commands
set showcmd

" incremental searching
set incsearch

" highlight search maches
set hlsearch

" show cursor position
set ruler

" turn on menu in command line
set wildmenu
set wildmode=list:longest,full

" show matches in searching
set showmatch

" ignore case for searching
set ignorecase

" duration to show brace matches (1/10)
set matchtime=2

" enable commands in comments
set modeline

" sane moves
nnoremap j gj
nnoremap k gk
inoremap <left> <left>
inoremap <right> <right>

" quoting paragraphs
nmap Q gqap
vmap Q gq

" Windows
" ============================================================================

" split buffers and set half size.
set equalalways

" Trailing whitespaces
" ============================================================================

set listchars=trail:.,tab:▸\ ,eol:¬

nnoremap <leader>l :set list<cr>

" Status line
" ============================================================================

set statusline=\ %Y\ \|\ %{&ff}\ \|\ %04lx%04v/%04p%%\ %L\ \|\ %F%m%=%r%h[%n]
set laststatus=2

" Tabs
" ============================================================================

nnoremap <leader>to :silent tabnew<cr>

" tab navigation
nnoremap <silent><esc>{ :silent tabprevious<cr>
nnoremap <silent><esc>} :silent tabnext<cr>

" goto tab #
nnoremap <silent><esc>1 1gt
nnoremap <silent><esc>2 2gt
nnoremap <silent><esc>3 3gt
nnoremap <silent><esc>4 4gt
nnoremap <silent><esc>5 5gt
nnoremap <silent><esc>6 6gt
nnoremap <silent><esc>7 7gt
nnoremap <silent><esc>8 8gt
nnoremap <silent><esc>9 9gt
nnoremap <silent><esc>0 10gt

" tab and re-tab
nnoremap <silent><leader>tm1 :silent tabmove 0<cr>
nnoremap <silent><leader>tm2 :silent tabmove 1<cr>
nnoremap <silent><leader>tm3 :silent tabmove 2<cr>
nnoremap <silent><leader>tm4 :silent tabmove 3<cr>
nnoremap <silent><leader>tm5 :silent tabmove 4<cr>
nnoremap <silent><leader>tm6 :silent tabmove 5<cr>
nnoremap <silent><leader>tm7 :silent tabmove 6<cr>
nnoremap <silent><leader>tm8 :silent tabmove 7<cr>
nnoremap <silent><leader>tm9 :silent tabmove 8<cr>
nnoremap <silent><leader>tm0 :silent tabmove 9<cr>

" Buffers
" ============================================================================
"
" buffer navigation
nnoremap <silent><esc>< :bprevious<cr>
nnoremap <silent><esc>> :bnext<cr>

" quickly save
nnoremap <f2> :write<cr>
nnoremap <s-f2> :wall<cr>

" make buffer
noremap <leader>bm :make %<cr>

" source buffer
noremap <silent><leader>bs :source %<cr>

" make buffer executable
map <leader>bx :!chmod +x %<cr>

" Window
" ============================================================================

" window cycle
nnoremap <c-tab> <c-w>w

" move lines around
nnoremap <c-j> :move+<cr>==
nnoremap <c-k> :move-2<cr>==
inoremap <c-j> <esc>:move+<cr>==gi
inoremap <c-k> <esc>:move-2<cr>==gi
vnoremap <c-j> :move'>+<cr>gv=gv
vnoremap <c-k> :move-2<cr>gv=gv

" Folding
" ============================================================================

set nofoldenable
set foldmethod=indent
set foldlevelstart=1
set foldnestmax=2

" enable/disable folding
map <leader>ze :set foldenable<cr>
map <leader>zd :set nofoldenable<cr>

" Scrolling
" ============================================================================

" limit in 3 lines bellow and above.
set scrolloff=3

" VimExplorer
" ============================================================================

let g:VEConf_externalExplorer = "thunar"
let g:VEConf_showHiddenFiles = 0
let g:VEConf_filePanelSortType = 1
let g:VEConf_treeSortDirection = 1

" SuperTab
" ============================================================================

let g:SuperTabDefaultCompletionType = "<c-n>"

" Sessions
" ============================================================================

let g:sessions_project_path = "$HOME/Code/applications:$HOME/Code/frameworks:$HOME/Code/resources:$HOME/Code/websites"

" Bash
" ============================================================================

let is_bash=1

" NERD tree
" ============================================================================
noremap <silent><leader>e :NERDTreeToggle<cr>
let NERDTreeIgnore = ['\.rbc']

" Ruby-Debugger
" ============================================================================
":let g:ruby_debugger_fast_sender = 1
noremap <silent><leader>.b  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.toggle_breakpoint()<cr>
noremap <silent><leader>.v  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.open_variables()<cr>
noremap <silent><leader>.m  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.open_breakpoints()<cr>
noremap <silent><leader>.t  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.open_frames()<cr>
noremap <silent><leader>.s  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.step()<cr>
noremap <silent><leader>.f  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.finish()<cr>
noremap <silent><leader>.n  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.next()<cr>
noremap <silent><leader>.c  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.continue()<cr>
noremap <silent><leader>.e  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.exit()<cr>
noremap <silent><leader>.d  :call ruby_debugger#load_debugger() <bar> call g:RubyDebugger.remove_breakpoints()<cr>

function! HighlightGroup()
  if !exists("*synstack")
    return
  endif
  return string(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'))
endfunction

" get highlight
map <leader>gh :echo HighlightGroup()<cr>

" redo last command in visual mode
vnoremap <silent>. :normal .<cr>

" redo last macro registered at 'w' key in visual mode
vnoremap <silent><leader>. :normal @w<cr>

