# require
snippet req require
	require("${1:library}")
# if-the-end
snippet if if statement
	if ${1:condition} then
		${2:commands}
	end
# if-then-else-end
snippet ifel if-then-else statement
	if ${1:condition} then
		${2:commands}
	else
		
	end
# if-then-elseif-else-end
snippet ifei if-then-elseif-else nested statement
	if ${1:first-condition} then
		${2:commands}
	elseif ${3:second-condition} then
		${4}
	else
		${5}
	end
# elseif-then
snippet elif elseif for if statement
	elseif ${1:condition} then
		${2:commands}
# while-do-end
snippet whil while-do statement
	while ${1:condition} do
		${2:commands}
	end
# repeat-until
snippet repe repeat-do statement
	repeat
		${1:commands}
	until ${2:condition}
# for-<i,n,s>-do-end
snippet fori numerical for statement
	for i = 1, ${1:#}${2:list}${3:, 1} do
		${4:commands}
	end
# for-<k,v>-in-<list>-do-end
snippet fork generic for statement
	for ${1:key, value} in ${2:list} do
		${3:commands}
	end
# for-<k,v>-in-<pairs>-do-end
snippet forp table pairs inspect
	for key, value in pairs(${1:table}) do
		print(key, value)
	end
# [local] function-end
snippet func function
	${1:local }function ${2:name}(${3:...})
		${4:return result}
	end
# [local] variable = function-end
snippet funv function to variable
	${1:local }${2:variable} = function ${3:name}(${4:...})
		${5:return result}
	end
# [local] table = {}
snippet tabl table
	${1:local }${2:table} = {}
# [local] hash = { <element> = value, ... }
snippet hash table as hash
	${1:local }${2:hash} = {
		${3:attribute} = ${4:value},
	}
# [local] array = { <element>, }
snippet list table as array/list
	${1:local }${2:list} = { ${3:element}, }
# default commands
snippet pv
	print(${1:variable})
snippet ps
	print("${1:text}")
snippet pf
	print(string.format("${1:%s}", ${2:string}))
