# ===========================================================================
# System
# ===========================================================================

# Create path and push into directories hash.
function mkpath {
  mkdir -p ${@}
  pushd ${@}
}

# ===========================================================================
# Git
# ===========================================================================

# Push the changes to all remotes in Git work copy
function git-push-to-all {
  : ${1:remote name is required}
  local branch="$(git symbolic-ref HEAD 2>/dev/null)"
        branch=${branch##*/}
  for remote in $(git remote); do
    echo "Pushing to ${remote} ..."
    git push $remote $branch
    echo
  done
  return 0
}

# Create a Git tag for versioning using a changelog file.
# Usage:   git-tag-version [file].tag
# Example:
#   $ git-tag-version v0.1.0.tag # tag named to v0.1.0
function git-tag-version {
  : ${1:?tag file is required}
  git tag -a -s -F ${1} ${1%.tag}
  return ${?}
}

# Delete all files in stage with "deleted" tag.
# Usage: git-delete-all
function git-delete-all {
  declare -a deleteds=$(git status | sed -n "/deleted/s/^.*[: ]/ /p")
  declare    confirm="${1:-n}"
  
  echo "Deleted files in stage area:"
  echo "${deleteds[*]// /  - }"

  read -p "Are you sure [y/N]? " confirm

  if [[ ${confirm:0:1} =~ [yY] ]]; then
    for delete in ${deleteds[@]}; do
      git rm ${delete}
    done
  else
    echo "Nothing to do."
  fi
  return 0
}

# ===========================================================================
# SSH
# ===========================================================================

# Push the SSH public key to remote hosts.
# Inspired in http://github.com/rtomayko/dotfiles/blob/rtomayko/.bashrc.
function ssh-push-cert {
  : ${1:?host is required}
  test -f ~/.ssh/id_dsa.pub || ssh-keygen -t dsa
  for host in "$@"; do
    echo "Pushing to $host ..."
    ssh $host "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_dsa.pub
  done
  unset host
}

# ===========================================================================
# Prompting
# ===========================================================================

function prompt {
  function __prompt_ssh {
    if test -n "${SSH_CONNECTION}"; then
      printf "[${COLOR_ON}${LOGNAME}@${HOSTNAME}${COLOR_OFF}]"
      return 0
    fi
    return 1
  }

  function __prompt_git {
    local git=($(git show-ref --heads 2> /dev/null))
    if test -n "${git}"; then
      # Get hash and branch reference
      # 0: hash
      # 1: branch
      # 2: remote
      # 3: status
      # 4: commits
      git[2]=$(git config --get branch.${git[1]##*/}.remote)
      git[3]=$(git status --short)
      git[4]=$(git log --format=oneline 2> /dev/null | wc -l)
      test -n "${git[3]}" && COLOR_ON=${COLOR_RED} || COLOR_ON=${COLOR_GREEN}
      printf "[${COLOR_ON}%-6s:%06d${COLOR_OFF}] %s@%s: " ${git[0]:0:6} ${git[4]} ${git[1]##*/} ${git[2]:-anyone}
      return 0
    fi
    return 1
  }

  function __prompt_path {
    declare    basedir=${PWD/${HOME}\/}
    declare -a workdir=(${basedir//\// })
    declare -i max=${#workdir[@]}
    declare -i min=max-2
    declare    path=${workdir[@]:min:max}
    [[ $min -eq 0 ]] && printf "~/${basedir}" || printf "~/[%02d]/%s" ${min} ${path// //}
  }

  if test "${1}" == "--all"; then
    echo "$(__prompt_ssh; __prompt_git)"
  else
    ${1/--/__prompt_}
  fi
}

# vim: filetype=sh
