# ===========================================================================
# System
# ===========================================================================

# Create path and push into directories hash.
function mkpath {
  mkdir -p "${*}"
  pushd "${*}"
}

# Move files to trash placed in ~/.local/share/Trash
function trash {
  local trash_path_files="${HOME}/.local/share/Trash/files"
  local trash_path_info="${HOME}/.local/share/Trash/info"

  mkdir -p ${trash_path_files}
  mkdir -p ${trash_path_info}

  for file in ${@}; do
    if [[ -e ${file} ]]; then
      local info=""
      local path=$(readlink -f ${file})

      info="${info}[Trash Info]\n"
      info="${info}Path=${path}\n"
      info="${info}DeletionDate=$(date +%FT%T)\n"

      echo -e ${info}
      echo -e ${trash_path_info}/$(basename ${path}).trashinfo
      echo -e ${trash_path_files}/$(basename ${path})

    fi
  done
}

# ===========================================================================
# Git
# ===========================================================================

# Push the changes to all remotes in Git work copy
function git-push-to-all {
  : ${1:remote name is required}
  local branch="$(git symbolic-ref HEAD 2>/dev/null)"
        branch=${branch##*/}
  for remote in $(git remote); do
    echo "Pushing to ${remote} ..."
    git push $remote $branch
    echo
  done
  return 0
}

# Create a Git tag for versioning using a changelog file.
# Usage:   git-tag-version <file>.tag [date]
# Example:
#   # tag named to v0.1.0
#   $ git-tag-version v0.1.0.rdoc
function git-tag-version {
  : ${1:?tag file is required}
  local tag=${1##*/}
  git tag -a -s -F ${1} ${tag%.*}
  unset tag
  return ${?}
}

# Create a Git retag.
# Usage:   git-retag-version <file>.tag <commit> <timestamp>
# Example:
#   # create tag using commit reference and timestamp
#   $ git-tag-version v0.0.1.tag 49107a62fbe04d2e7f74d9873bd32347ac101991 "2010-10-01 23:58:00"
function git-retag-version {
  : ${1:? Tag file is required}
  : ${2:? Commit is required}
  : ${3:? Timestamp is required}
  local tag=${1##*/}
  GIT_COMITTER_DATE="${3}" git tag -a -s -F ${1} ${tag%.*} ${2}
  unset tag
  return ${?}
}

# Delete all files in stage with "deleted" tag.
# Usage: git-delete-all
function git-delete-all {
  declare -a deleteds=$(git status | sed -n "/deleted/s/^.*[: ]/ /p")
  declare    confirm="${1:-n}"
  
  echo "Deleted files in stage area:"
  echo "${deleteds[*]// /  - }"

  read -p "Are you sure [y/N]? " confirm

  if [[ ${confirm:0:1} =~ [yY] ]]; then
    for delete in ${deleteds[@]}; do
      git rm ${delete}
    done
  else
    echo "Nothing to do."
  fi
  return 0
}

# ===========================================================================
# SSH
# ===========================================================================

# Push the SSH public key to remote hosts.
# Inspired in http://github.com/rtomayko/dotfiles/blob/rtomayko/.bashrc.
function ssh-push-cert {
  : ${1:?host is required}
  test -f ~/.ssh/id_dsa.pub || ssh-keygen -t dsa
  for host in "$@"; do
    echo "Pushing to $host ..."
    ssh $host "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_dsa.pub
  done
  unset host
}

# ===========================================================================
# Prompting
# ===========================================================================

function prompt {

  PROMPT_FORMAT=""
  PROMPT=()

  function __prompt_ssh {
    if test -n "${SSH_CONNECTION}"; then
      PROMPT_FORMAT="[${PS_COLOR_ON}%s@%s${PS_COLOR_OFF}]"
      PROMPT=(${LOGNAME} ${HOSTNAME})
      return 0
    fi
    return 1
  }

  function __prompt_git {
    local branch=$(git symbolic-ref HEAD 2>/dev/null)
    if test -n "${branch}"; then
      # Get hash and branch reference
      # 0: hash
      # 1: branch
      # 2: remote
      # 3: status
      # 4: commits
      local branch="${branch##*/}"
      local hash="$(git show-ref --heads 2>/dev/null | grep ${branch})"
      local remote="$(git config --get branch.${branch##*/}.remote)"
      local status="$(git status --short)"
      local -i commits="$(git log --format=oneline 2> /dev/null | wc -l)"
      test -n "${status}" && PS_COLOR_ON=${PS_COLOR_RED} || PS_COLOR_ON=${PS_COLOR_GREEN}
      PROMPT_FORMAT="[${PS_COLOR_ON}%-6s:%06d${PS_COLOR_OFF}] %s@%s: "
      PROMPT=(${hash:0:6} ${commits:-0} ${branch} ${remote:-anyone})
      return 0
    fi
    return 1
  }

  function __prompt_path {
    declare    basedir=${PWD/${HOME}\/}
    declare -a workdir=(${basedir//\// })
    declare -i max=${#workdir[@]}
    declare -i min=max-2
    declare    path=${workdir[@]:min:max}
    if test $min -eq 0; then
      PROMPT_FORMAT="%s"
      PROMPT=(~/${basedir})
    else
      PROMPT_FORMAT="~/[%02d]/%s"
      PROMPT=(${min} ${path// //})
    fi
  }

  function __prompt_check {
    __prompt_ssh || __prompt_git
  }

  ${1/--/__prompt_}

  PS1="$(printf "${PROMPT_FORMAT}" ${PROMPT[@]})${PS_COLOR_GREEN}\w${PS_COLOR_OFF}\$ "
  PS2="$(printf "${PROMPT_FORMAT}" ${PROMPT[@]})\w${PS_COLOR_RED}>${PS_COLOR_OFF}   "
  PS3="#? "
  PS4="\${BASH_SOURCE##*/}:\${LINENO}> "

}

# vim: filetype=sh
